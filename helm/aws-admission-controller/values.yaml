aws:
  availabilityZones: []
  instance:
    allowed: []
  region: ""

managementCluster:
  kubernetes:
    auth:
      tenantAdminTargetGroup: ""

workloadCluster:
  baseDomain: ""
  cni:
    cidr: ""
  docker:
    cidr: ""
  ipam:
    cidr: ""
  kubernetes:
    api:
      clusterIPRange: ""

registry:
  domain: docker.io

image:
  name: "giantswarm/aws-admission-controller"
  tag: "[[ .Version ]]"

project:
  branch: "[[ .Branch ]]"
  commit: "[[ .SHA ]]"

deploymentStrategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
  type: RollingUpdate

podDisruptionBudget:
  enabled: true
  minAvailable: 1

verticalPodAutoscaler:
  enabled: true

  # Add seccomp to pod security context
podSecurityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

# Add seccomp to container security context
securityContext:
  seccompProfile:
    type: RuntimeDefault
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

serviceMonitor:
  enabled: true
  # -- (duration) Prometheus scrape interval.
  interval: "60s"
  # -- (duration) Prometheus scrape timeout.
  scrapeTimeout: "45s"

global:
  podSecurityStandards:
    enforced: false
